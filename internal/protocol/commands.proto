// Copyright 2017 Canonical Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package protocol;

// Command encapsulates the payload fo a dqlite Raft FSM command.
//
// On the wire this will be a varint indentifying the command type,
// followed by the command payload.
message Command {
  oneof Payload {
    Open open = 1;
    Begin begin = 2;
    Frames frames = 3;
    Undo undo = 4;
    End end = 5;
    Checkpoint checkpoint = 6;
  }
}

// Parameters to open a new database and setup the needed data
// structures for replication.
message Open {
  string name = 1; // Name of the database file.
}

// Parameters to begin a new write transaction.
//
// This command is not used anymore, but it's
// kept for backward-compatibility.
message Begin {
  uint64 txid = 1; // Transaction identifier.
  string name = 2; // Name of the database file.
}

// Parameters to append new frames to the WAL within a write transaction.
message Frames {
  uint64 txid = 1;                  // Transaction identifier.
  int32 page_size = 2;              // Size of the data field of each frame.
  repeated uint32 page_numbers = 3; // Page numbers of the frames to write.
  bytes page_data = 4;              // Contiguous page data.
  uint32 truncate = 5;              // Flag telling if the WAL should be truncated.
  int32 is_commit = 6;              // Flag telling if this is a final frames write.
  string filename = 7;              // Filename of the database file.
}

// Parameters to undo any previous WAL change in a write transaction.
message Undo {
  uint64 txid = 1; // Transaction identifier.
}

// Parameters to end a write transaction, and update the WAL commit
// pointer.
//
// This command is not used anymore, but it's
// kept for backward-compatibility.
message End {
  uint64 txid = 1; // Transaction identifier.
}

// Parameters to perform a WAL checkpoint.
message Checkpoint {
  string name = 1; // Name of the database file.
}
